{
  "_args": [
    [
      {
        "raw": "denque@^1.1.1",
        "scope": null,
        "escapedName": "denque",
        "name": "denque",
        "rawSpec": "^1.1.1",
        "spec": ">=1.1.1 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Nhu Y Pham\\Documents\\CodingBootcamp\\Homework Assignments\\sequelized-burger\\node_modules\\mysql2"
    ]
  ],
  "_from": "denque@>=1.1.1 <2.0.0",
  "_id": "denque@1.1.1",
  "_inCache": true,
  "_location": "/denque",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/denque-1.1.1.tgz_1485432447235_0.5495167723856866"
  },
  "_npmUser": {
    "name": "salakar",
    "email": "mike.diarmid@gmail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "denque@^1.1.1",
    "scope": null,
    "escapedName": "denque",
    "name": "denque",
    "rawSpec": "^1.1.1",
    "spec": ">=1.1.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/mysql2"
  ],
  "_resolved": "https://registry.npmjs.org/denque/-/denque-1.1.1.tgz",
  "_shasum": "10229c2b88eec1bd15ff82c5fde356e7beb6db9e",
  "_shrinkwrap": null,
  "_spec": "denque@^1.1.1",
  "_where": "C:\\Users\\Nhu Y Pham\\Documents\\CodingBootcamp\\Homework Assignments\\sequelized-burger\\node_modules\\mysql2",
  "author": {
    "name": "Mike Diarmid",
    "email": "mike.diarmid@teamfa.com",
    "url": "http://github.com/Salakar/"
  },
  "bugs": {
    "url": "https://github.com/Salakar/denque/issues"
  },
  "dependencies": {},
  "description": "The fastest javascript implementation of a double-ended queue. Maintains compatability with deque.",
  "devDependencies": {
    "benchmark": "^2.1.0",
    "coveralls": "^2.11.9",
    "double-ended-queue": "^2.1.0-0",
    "istanbul": "^0.4.4",
    "mocha": "^2.5.3"
  },
  "directories": {},
  "dist": {
    "shasum": "10229c2b88eec1bd15ff82c5fde356e7beb6db9e",
    "tarball": "https://registry.npmjs.org/denque/-/denque-1.1.1.tgz"
  },
  "engines": {
    "node": ">=4.0"
  },
  "gitHead": "51ff1aefe182491ddfde394262edaea6889ffcf2",
  "homepage": "https://github.com/Salakar/denque#readme",
  "keywords": [
    "data-structure",
    "data-structures",
    "queue",
    "double",
    "end",
    "ended",
    "deque",
    "denque",
    "double-ended-queue"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "salakar",
      "email": "mike.diarmid@gmail.com"
    }
  ],
  "name": "denque",
  "optionalDependencies": {},
  "readme": "# DENQUE\n\n[![Coverage Status](https://coveralls.io/repos/github/Salakar/denque/badge.svg?branch=master)](https://coveralls.io/github/Salakar/denque?branch=master)\n[![build](https://travis-ci.org/Salakar/denque.svg)](https://travis-ci.org/Salakar/denque)\n[![npm version](https://img.shields.io/npm/v/denque.svg)](https://www.npmjs.com/package/denque)\n[![License](https://img.shields.io/npm/l/denque.svg)](/LICENSE)\n\nExtremely fast and lightweight [double-ended queue](http://en.wikipedia.org/wiki/Double-ended_queue) implementation with zero dependencies.\n\nDouble-ended queues can also be used as a:\n\n- [Stack](http://en.wikipedia.org/wiki/Stack_\\(abstract_data_type\\))\n- [Queue](http://en.wikipedia.org/wiki/Queue_\\(data_structure\\))\n\nThis implementation is currently the fastest available, even faster than `double-ended-queue`, see the [benchmarks](#benchmarks)\n\nEvery queue operation is done at a constant `O(1)` - including random access from `.peekAt(index)`.\n\n**Works on all node versions >= v0.10**\n\n# Quick Start\n\n    npm install denque\n\n```js\nconst Denque = require(\"denque\");\n\nconst denque = new Denque([1,2,3,4]);\ndenque.shift(); // 1\ndenque.pop(); // 4\n```\n\n\n# API\n\n- [`new Denque()`](#new-denque---denque)\n- [`new Denque(Array items)`](#new-denquearray-items---denque)\n- [`push(item)`](#pushitem---int)\n- [`unshift(item)`](#unshiftitem---int)\n- [`pop()`](#pop---dynamic)\n- [`shift()`](#shift---dynamic)\n- [`toArray()`](#toarray---array)\n- [`peekBack()`](#peekback---dynamic)\n- [`peekFront()`](#peekfront---dynamic)\n- [`peekAt(int index)`](#peekAtint-index---dynamic)\n- [`isEmpty()`](#isempty---boolean)\n- [`clear()`](#clear---void)\n\n#####`new Denque()` -> `Denque`\n\nCreates an empty double-ended queue with initial capacity of 4.\n\n```js\nvar denque = new Denque();\ndenque.push(1, 2, 3);\ndenque.shift(); //1\ndenque.pop(); //3\n```\n\n<hr>\n\n#####`new Denque(Array items)` -> `Denque`\n\nCreates a double-ended queue from `items`.\n\n```js\nvar denque = new Denque([1,2,3,4]);\ndenque.shift(); // 1\ndenque.pop(); // 4\n```\n\n<hr>\n\n\n#####`push(item)` -> `int`\n\nPush an item to the back of this queue. Returns the amount of items currently in the queue after the operation.\n\n```js\nvar denque = new Denque();\ndenque.push(1);\ndenque.pop(); // 1\ndenque.push(2);\ndenque.push(3);\ndenque.shift(); // 2\ndenque.shift(); // 3\n```\n\n<hr>\n\n#####`unshift(item)` -> `int`\n\nUnshift an item to the front of this queue. Returns the amount of items currently in the queue after the operation.\n\n```js\nvar denque = new Denque([2,3]);\ndenque.unshift(1);\ndenque.toString(); // \"1,2,3\"\ndenque.unshift(-2);\ndenque.toString(); // \"-2,-1,0,1,2,3\"\n```\n\n<hr>\n\n\n#####`pop()` -> `dynamic`\n\nPop off the item at the back of this queue.\n\nNote: The item will be removed from the queue. If you simply want to see what's at the back of the queue use [`peekBack()`](#peekback---dynamic) or [`.peekAt(-1)`](#peekAtint-index---dynamic).\n\nIf the queue is empty, `undefined` is returned. If you need to differentiate between `undefined` values in the queue and `pop()` return value -\ncheck the queue `.length` before popping.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.pop(); // 3\ndenque.pop(); // 2\ndenque.pop(); // 1\ndenque.pop(); // undefined\n```\n\n**Aliases:** `removeBack`\n\n<hr>\n\n#####`shift()` -> `dynamic`\n\nShifts off the item at the front of this queue.\n\nNote: The item will be removed from the queue. If you simply want to see what's at the front of the queue use [`peekFront()`](#peekfront---dynamic) or [`.peekAt(0)`](#peekAtint-index---dynamic).\n\nIf the queue is empty, `undefined` is returned. If you need to differentiate between `undefined` values in the queue and `shift()` return value -\ncheck the queue `.length` before shifting.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.shift(); // 1\ndenque.shift(); // 2\ndenque.shift(); // 3\ndenque.shift(); // undefined\n```\n\n<hr>\n\n#####`toArray()` -> `Array`\n\nReturns the items in the queue as an array. Starting from the item in the front of the queue and ending to the item at the back of the queue.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.push(4);\ndenque.unshift(0);\ndenque.toArray(); // [0,1,2,3,4]\n```\n\n<hr>\n\n#####`peekBack()` -> `dynamic`\n\nReturns the item that is at the back of this queue without removing it.\n\nIf the queue is empty, `undefined` is returned.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.push(4);\ndenque.peekBack(); // 4\n```\n\n<hr>\n\n#####`peekFront()` -> `dynamic`\n\nReturns the item that is at the front of this queue without removing it.\n\nIf the queue is empty, `undefined` is returned.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.push(4);\ndenque.peekFront(); // 1\n```\n\n<hr>\n\n#####`peekAt(int index)` -> `dynamic`\n\nReturns the item that is at the given `index` of this queue without removing it.\n\nThe index is zero-based, so `.peekAt(0)` will return the item that is at the front, `.peekAt(1)` will return\nthe item that comes after and so on.\n\nThe index can be negative to read items at the back of the queue. `.peekAt(-1)` returns the item that is at the back of the queue,\n`.peekAt(-2)` will return the item that comes before and so on.\n\nReturns `undefined` if `index` is not a valid index into the queue.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.peekAt(0); //1\ndenque.peekAt(1); //2\ndenque.peekAt(2); //3\n\ndenque.peekAt(-1); // 3\ndenque.peekAt(-2); // 2\ndenque.peekAt(-3); // 1\n```\n\n**Note**: The implementation has O(1) random access using `.peekAt()`.\n\n**Aliases:** `get`\n\n<hr>\n\n#####`isEmpty()` -> `boolean`\n\nReturn `true` if this queue is empty, `false` otherwise.\n\n```js\nvar denque = new Denque();\ndenque.isEmpty(); // true\ndenque.push(1);\ndenque.isEmpty(); // false\n```\n\n<hr>\n\n#####`clear()` -> `void`\n\nRemove all items from this queue. Does not change the queue's capacity.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.toString(); // \"1,2,3\"\ndenque.clear();\ndenque.toString(); // \"\"\n```\n<hr>\n\n\n## Benchmarks\n\n### 1000 items in queue\n\n    denque x 31,015,027 ops/sec ±1.52% (86 runs sampled)\n    double-ended-queue x 21,350,509 ops/sec ±1.21% (86 runs sampled)\n\n### 2 million items in queue\n\n    denque x 28,710,051 ops/sec ±0.95% (87 runs sampled)\n    double-ended-queue x 20,531,490 ops/sec ±1.04% (89 runs sampled)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Salakar/denque.git"
  },
  "scripts": {
    "benchmark_thousand": "node benchmark/thousand",
    "benchmark_two_million": "node benchmark/two_million",
    "coveralls": "cat ./coverage/lcov.info | coveralls",
    "test": "istanbul cover --report lcov _mocha"
  },
  "version": "1.1.1"
}
